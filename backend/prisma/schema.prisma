generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  phone         String?
  agreedToTerms Boolean
  provider      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  deletedAt     DateTime? 

  cart          Cart?
  vouchers      UserVoucher[]  // thêm quan hệ
  order   Order[]
  review  Review[]
  adminchatmessage AdminChatMessage[]
  adminchatroom    AdminChatRoom[]
}


model Product {
  id            Int             @id @default(autoincrement())
  name          String
  year          Int
  discount      Float?          @default(0)
  slug          String          @db.VarChar(255) @unique
  image         String?         
  description   String?  @db.Text
  isActive      Boolean         @default(true)
  categoryId    Int
  price         Float
  warranty      String?
  fuelType      String?
  power         String?
  seats         Int?
  contactInfo   String?
  km            Int?
  quantity      Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt

  category      Category        @relation(fields: [categoryId], references: [id])
  specifications Specification[]
  features      Feature[]
  safeties      Safety[]
  images        ProductImage[]
  colors        Color[]
  cartItems     CartItem[]      // Quan hệ 1-n với CartItem
  orderitem  OrderItem[]
  review      Review[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  url       String

  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  products    Product[]
}

model Specification {
  id        Int     @id @default(autoincrement())
  productId Int
  key       String  
  value     String  

  product   Product @relation(fields: [productId], references: [id])
}

model Feature {
  id        Int     @id @default(autoincrement())
  productId Int
  name      String 

  product   Product @relation(fields: [productId], references: [id])
}

model Safety {
  id        Int     @id @default(autoincrement())
  productId Int
  name      String 

  product   Product @relation(fields: [productId], references: [id])
}

model Color {
  id        Int     @id @default(autoincrement())
  productId Int
  name      String
  hex       String?  
  gradient  String?  

  product   Product @relation(fields: [productId], references: [id])
  cartItems CartItem[]
  orderitem   OrderItem[]
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)
  price     Float    
  colorId   Int?     

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  color     Color?   @relation(fields: [colorId], references: [id])
}


model Voucher {
  id            Int       @id @default(autoincrement())
  code          String    @unique      // Mã code: SALE10, FREESHIP...
  description   String?
  image String?
  discountType  String    // "percent" | "fixed" | "freeship"
  discountValue Float?    // nếu percent: 10 => 10%, nếu fixed: 100000 => 100k VND
  maxDiscount   Float?    // Giới hạn giảm tối đa (optional)
  minOrderValue Float?    // Đơn hàng tối thiểu mới được áp dụng
  startDate     DateTime
  endDate       DateTime
  usageLimit    Int?      // Giới hạn số lần dùng tổng (vd: 1000 lượt)
  usedCount     Int       @default(0)  // Số lượt đã dùng
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  users         UserVoucher[] // Quan hệ n-n với User
  order       Order[]
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  userId    Int
  voucherId Int
  isUsed    Boolean  @default(false)  // Đánh dấu đã sử dụng
  usedAt    DateTime?

  user      User     @relation(fields: [userId], references: [id])
  voucher   Voucher  @relation(fields: [voucherId], references: [id])
}


model Order {
  id            Int          @id @default(autoincrement())
  userId        Int
  totalAmount   Float
  paymentMethod String       // "COD" | "MOMO" | "BANK"
  status        String       @default("pending") 
  paymentStatus String       @default("unpaid") // unpaid | paid | failed
  voucherId     Int?         
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  address       Json? 
  user          User         @relation(fields: [userId], references: [id])
  voucher       Voucher?     @relation(fields: [voucherId], references: [id])
  items         OrderItem[]

  review        Review[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  colorId   Int?

  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  color     Color?  @relation(fields: [colorId], references: [id])
}


model Review {
  id         Int       @id @default(autoincrement())
  userId     Int
  productId  Int
  orderId    Int        // để biết review này thuộc đơn hàng nào
  rating     Int        // 1 - 5 sao
  comment    String?    @db.Text
  images     ReviewImage[] // ảnh kèm theo review
  isEdited   Boolean    @default(false)
  isVisible  Boolean    @default(true) // cho phép admin ẩn review vi phạm
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt

  // Quan hệ
  user       User       @relation(fields: [userId], references: [id])
  product    Product    @relation(fields: [productId], references: [id])
  order      Order      @relation(fields: [orderId], references: [id])

  @@unique([userId, productId, orderId]) // 1 user chỉ review 1 lần sp trong 1 đơn
}

model ReviewImage {
  id        Int     @id @default(autoincrement())
  reviewId  Int
  url       String
  review    Review  @relation(fields: [reviewId], references: [id])
}

model ChatMessage {
  id        Int      @id @default(autoincrement())
  userId    Int
  role      String   // "user" | "assistant"
  content   String
  createdAt DateTime @default(now())
}


model AdminChatRoom {
  id        Int                 @id @default(autoincrement())
  userId    Int                 @unique
  createdAt DateTime            @default(now())
  messages  AdminChatMessage[]
  user      User                @relation(fields: [userId], references: [id])
}

model AdminChatMessage {
  id        Int      @id @default(autoincrement())
  roomId    Int
  userId    Int
  adminId  Int?     // cho admin
  role      String   // "user" | "admin"
  content   String
   isRead    Boolean  @default(false)  // ✅ thêm đây
  createdAt DateTime @default(now())

  room      AdminChatRoom @relation(fields: [roomId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}
