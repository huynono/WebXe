const { PrismaClient } = require("@prisma/client");
const OpenAI = require("openai").default;
const jwt = require("jsonwebtoken");

const prisma = new PrismaClient();
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const chatWithAI = async (req, res) => {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p" });

  let userId;
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    userId = decoded.userId || decoded.id;
  } catch (err) {
    console.error("L·ªói decode JWT:", err); 
    return res.status(401).json({ message: "Token kh√¥ng h·ª£p l·ªá" });
  }

  if (!userId) return res.status(401).json({ message: "Token kh√¥ng c√≥ userId" });

  const { message } = req.body;
  if (!message?.trim()) return res.status(400).json({ error: "Message is required" });

  try {
    console.log(`üì© User message: "${message}" from userId: ${userId}`);

    // 2Ô∏è‚É£ L·∫•y s·∫£n ph·∫©m li√™n quan (keyword search) ho·∫∑c top 10
    let products = await prisma.product.findMany({
      where: { name: { contains: message } },
      select: {
        name: true,
        year: true,
        price: true,
        warranty: true,
        fuelType: true,
        power: true,
        seats: true,
        km: true,
        quantity: true,
        specifications: { select: { key: true, value: true } },
        features: { select: { name: true } },
        safeties: { select: { name: true } },
        colors: { select: { name: true, hex: true, gradient: true } },
      },
      take: 5,
    });

    if (!products.length) {
      products = await prisma.product.findMany({
        orderBy: { createdAt: "desc" },
        select: {
          name: true,
          year: true,
          price: true,
          warranty: true,
          fuelType: true,
          power: true,
          seats: true,
          km: true,
          quantity: true,
          specifications: { select: { key: true, value: true } },
          features: { select: { name: true } },
          safeties: { select: { name: true } },
          colors: { select: { name: true, hex: true, gradient: true } },
        },
        take: 10,
      });
    }

    // 3Ô∏è‚É£ Chu·∫©n h√≥a s·∫£n ph·∫©m th√†nh JSON
    const productContext = products.map(p => ({
      name: p.name,
      year: p.year || null,
      price: p.price || null,
      warranty: p.warranty || null,
      fuelType: p.fuelType || null,
      power: p.power || null,
      seats: p.seats || null,
      km: p.km || null,
      quantity: p.quantity || null,
      specifications: Object.fromEntries(p.specifications.map(s => [s.key, s.value])),
      features: p.features.map(f => f.name),
      safeties: p.safeties.map(s => s.name),
      colors: p.colors.map(c => ({ name: c.name, hex: c.hex, gradient: c.gradient })),
    }));

    // 4 X√¢y d·ª±ng prompt v·ªõi few-shot examples
    const systemPrompt = `
B·∫°n l√† tr·ª£ l√Ω b√°n h√†ng √¥ t√¥ th√¥ng minh. 
Ch·ªâ s·ª≠ d·ª•ng d·ªØ li·ªáu JSON d∆∞·ªõi ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m. 
Tr·∫£ l·ªùi chi ti·∫øt v·ªÅ: gi√°, m√†u s·∫Øc, s·ªë l∆∞·ª£ng c√≤n, t√≠nh nƒÉng, b·∫£o h√†nh, c√¥ng su·∫•t, s·ªë gh·∫ø, s·ªë km ƒë√£ ch·∫°y. 
N·∫øu c√¢u h·ªèi kh√¥ng c√≥ trong d·ªØ li·ªáu, tr·∫£ l·ªùi: "Th√¥ng tin n√†y hi·ªán ch∆∞a c√≥".
Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu.

V√≠ d·ª•:
- User h·ªèi: "Xe ch·∫°y ƒë∆∞·ª£c bao nhi√™u km r·ªìi?"
  Tr·∫£ l·ªùi: "Xe ƒë√£ ch·∫°y 15.000 km."

- User h·ªèi: "Gi√° c·ªßa xe l√† bao nhi√™u?"
  Tr·∫£ l·ªùi: "Gi√° c·ªßa xe l√† 1.200.000.000 VNƒê."

- User h·ªèi: "Xe c√≤n bao nhi√™u chi·∫øc?"
  Tr·∫£ l·ªùi: "Hi·ªán t·∫°i c√≤n 3 chi·∫øc trong kho."

- User h·ªèi: "Xe c√≥ m√†u ƒë·ªè kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe c√≥ m√†u ƒë·ªè."

- User h·ªèi: "Xe c√≥ m√†u xanh v√† tr·∫Øng kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe c√≥ m√†u xanh v√† tr·∫Øng."

- User h·ªèi: "B·∫£o h√†nh xe bao l√¢u?"
  Tr·∫£ l·ªùi: "Xe ƒë∆∞·ª£c b·∫£o h√†nh 3 nƒÉm ho·∫∑c 100.000 km."

- User h·ªèi: "Xe s·ª≠ d·ª•ng lo·∫°i nhi√™n li·ªáu g√¨?"
  Tr·∫£ l·ªùi: "Xe s·ª≠ d·ª•ng xƒÉng."

- User h·ªèi: "Xe c√≥ bao nhi√™u gh·∫ø?"
  Tr·∫£ l·ªùi: "Xe c√≥ 5 gh·∫ø."

- User h·ªèi: "C√¥ng su·∫•t c·ªßa xe l√† bao nhi√™u?"
  Tr·∫£ l·ªùi: "C√¥ng su·∫•t c·ªßa xe l√† 150 HP."

- User h·ªèi: "Xe c√≥ bao nhi√™u t√≠nh nƒÉng an to√†n?"
  Tr·∫£ l·ªùi: "Xe c√≥ c√°c t√≠nh nƒÉng an to√†n: ABS, Airbag, Camera l√πi."

- User h·ªèi: "Xe c√≥ phanh ABS kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe c√≥ phanh ABS."

- User h·ªèi: "Xe c√≥ t√≠nh nƒÉng Cruise Control kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe c√≥ t√≠nh nƒÉng Cruise Control."

- User h·ªèi: "Xe c√≥ h·ªó tr·ª£ Bluetooth kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe h·ªó tr·ª£ Bluetooth."

- User h·ªèi: "Xe c√≥ c·ª≠a s·ªï tr·ªùi kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe c√≥ c·ª≠a s·ªï tr·ªùi."

- User h·ªèi: "Xe c√≥ s·ªë t·ª± ƒë·ªông hay s·ªë s√†n?"
  Tr·∫£ l·ªùi: "Xe c√≥ h·ªôp s·ªë t·ª± ƒë·ªông 6 c·∫•p."

- User h·ªèi: "Xe c√≥ ch·ªëng tr·ªôm kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe c√≥ h·ªá th·ªëng ch·ªëng tr·ªôm."

- User h·ªèi: "Xe c√≥ gh·∫ø da kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe ƒë∆∞·ª£c trang b·ªã gh·∫ø da."

- User h·ªèi: "Xe c√≥ camera 360 ƒë·ªô kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe c√≥ camera 360 ƒë·ªô."

- User h·ªèi: "Xe c√≥ radio kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe c√≥ h·ªá th·ªëng radio."

- User h·ªèi: "C√≥ h·ªó tr·ª£ s·∫°c ƒëi·ªán tho·∫°i kh√¥ng?"
  Tr·∫£ l·ªùi: "C√≥, xe c√≥ c·ªïng s·∫°c USB."

- User h·ªèi: "Xe n√†y c√≥ gi·∫£m gi√° kh√¥ng?"
  Tr·∫£ l·ªùi: "Hi·ªán t·∫°i xe c√≥ gi·∫£m gi√° 10%."

- User h·ªèi: "S·ªë km t·ªëi ƒëa xe ƒë√£ ch·∫°y?"
  Tr·∫£ l·ªùi: "Xe ƒë√£ ch·∫°y t·ªëi ƒëa 15.000 km."


D·ªØ li·ªáu s·∫£n ph·∫©m:
${JSON.stringify(productContext, null, 2)}
`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: message },
      ],
    });

    const reply = completion.choices[0].message?.content || "Kh√¥ng c√≥ ph·∫£n h·ªìi";

    // 5Ô∏è‚É£ L∆∞u chat v√†o DB
    await prisma.chatMessage.create({ data: { userId, role: "user", content: message } });
    await prisma.chatMessage.create({ data: { userId, role: "assistant", content: reply } });

    res.json({ reply });
  } catch (error) {
    console.error("‚ùå ChatAI error:", error);
    res.status(500).json({ error: "AI error", details: error.message });
  }
};

module.exports = { chatWithAI };
