const { PrismaClient } = require('@prisma/client');
const cloudinary = require('cloudinary').v2;
const prisma = new PrismaClient();

// C·∫•u h√¨nh Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

exports.createCategory = async (req, res) => {
  try {
    console.log('üîç Request body:', req.body);
    console.log('üîç Request file:', req.file);
    
    const { name, slug, description, isActive } = req.body;

    // Validate required fields
    if (!name || !name.trim()) {
      return res.status(400).json({
        message: "‚ùå T√™n danh m·ª•c l√† b·∫Øt bu·ªôc"
      });
    }

    let imageUrl = null;
    
    // N·∫øu c√≥ file th√¨ l·∫•y URL t·ª´ Cloudinary (multer-storage-cloudinary ƒë√£ upload r·ªìi)
    if (req.file) {
      console.log('üìÅ File uploaded:', req.file);
      imageUrl = req.file.path; // Cloudinary tr·∫£ v·ªÅ URL trong req.file.path
    }

    const categoryData = {
      name: name.trim(),
      slug: slug || name.toLowerCase().replace(/\s+/g, '-'),
      description: description || '',
      image: imageUrl,
      isActive: isActive === "true" || isActive === true,
    };

    console.log('üìù Creating category with data:', categoryData);

    const newCategory = await prisma.category.create({
      data: categoryData,
    });

    console.log('‚úÖ Category created successfully:', newCategory);

    res.status(201).json({
      message: "‚úÖ T·∫°o danh m·ª•c th√†nh c√¥ng",
      category: newCategory,
    });
  } catch (error) {
    console.error("‚ùå Error in createCategory:", error);
    
    if (error.code === "P2002") {
      return res.status(400).json({
        message: `‚ùå Slug "${req.body?.slug || 'unknown'}" ƒë√£ t·ªìn t·∫°i!`,
      });
    }

    res.status(500).json({
      message: "‚ùå L·ªói server khi t·∫°o danh m·ª•c",
      error: error.message,
    });
  }
};


exports.getAllCategories = async (req, res) => {
  try {
    const categories = await prisma.category.findMany({
      orderBy: { id: 'asc' } // S·∫Øp x·∫øp theo ID
    });

    res.status(200).json({
      message: '‚úÖ L·∫•y danh s√°ch category th√†nh c√¥ng',
      total: categories.length,
      categories
    });
  } catch (error) {
    console.error('‚ùå L·ªói server:', error);
    res.status(500).json({
      message: 'L·ªói server',
      error: error.message
    });
  }
};

exports.updateCategoryStatus = async (req, res) => {
  const id = req.params.id;              // L·∫•y id t·ª´ params URL
  const { isActive } = req.body;         // L·∫•y isActive t·ª´ body JSON

  // Ki·ªÉm tra d·ªØ li·ªáu truy·ªÅn v√†o
  if (id === undefined || isActive === undefined) {
    return res.status(400).json({ message: 'Thi·∫øu id ho·∫∑c isActive' });
  }

  try {
    // C·∫≠p nh·∫≠t tr∆∞·ªùng isActive trong b·∫£ng category (ch·ªØ th∆∞·ªùng)
    const updatedCategory = await prisma.category.update({
      where: { id: Number(id) },
      data: {
        isActive: isActive === 'true' || isActive === true,
      },
    });

    return res.status(200).json({
      message: '‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i danh m·ª•c th√†nh c√¥ng',
      category: updatedCategory,
    });
  } catch (error) {
    console.error('‚ùå L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i danh m·ª•c:', error);
    return res.status(500).json({
      message: 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i danh m·ª•c',
      error: error.message,
    });
  }
};

exports.deleteCategory = async (req, res) => {
  const { id } = req.params; // L·∫•y id category t·ª´ URL params

  if (!id) {
    return res.status(400).json({ message: 'Thi·∫øu id danh m·ª•c c·∫ßn x√≥a' });
  }

  try {
    // X√≥a category theo id
    await prisma.category.delete({
      where: { id: Number(id) },
    });

    return res.status(200).json({ message: '‚úÖ X√≥a danh m·ª•c th√†nh c√¥ng' });
  } catch (error) {
    console.error('‚ùå L·ªói server khi x√≥a danh m·ª•c:', error);
    return res.status(500).json({
      message: 'L·ªói server khi x√≥a danh m·ª•c',
      error: error.message,
    });
  }
};

exports.updateCategory = async (req, res) => {
  const { id } = req.params; // L·∫•y ID t·ª´ URL
  const { name, slug, description, isActive } = req.body;

  if (!id) {
    return res.status(400).json({ message: 'Thi·∫øu id danh m·ª•c c·∫ßn c·∫≠p nh·∫≠t' });
  }

  try {
    let imageUrl = undefined;
    
    // N·∫øu c√≥ file m·ªõi th√¨ l·∫•y URL t·ª´ Cloudinary
    if (req.file) {
      imageUrl = req.file.path; // Cloudinary tr·∫£ v·ªÅ URL trong req.file.path
    }

    const updatedCategory = await prisma.category.update({
      where: { id: Number(id) },
      data: {
        name,
        slug: slug || name.toLowerCase().replace(/\s+/g, '-'), // n·∫øu kh√¥ng c√≥ slug th√¨ auto t·∫°o
        description,
        isActive: isActive === 'true' || isActive === true,
        ...(imageUrl && { image: imageUrl }), // ch·ªâ update image n·∫øu c√≥ file m·ªõi
      },
    });

    return res.status(200).json({
      message: '‚úÖ C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng',
      category: updatedCategory,
    });
  } catch (error) {
    if (error.code === 'P2002') {
      return res.status(400).json({
        message: `‚ùå Slug "${slug}" ƒë√£ t·ªìn t·∫°i!`,
      });
    }

    console.error('‚ùå L·ªói server khi c·∫≠p nh·∫≠t danh m·ª•c:', error);
    return res.status(500).json({
      message: 'L·ªói server khi c·∫≠p nh·∫≠t danh m·ª•c',
      error: error.message,
    });
  }
};

